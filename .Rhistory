) +
ggdist::stat_halfeye(point_interval = 'mean_hdi', .width = c(0.8,0.95), fill = 'lightblue') +
ylab("Posterior Density") + xlab(expression(rho))
tidybayes::theme_tidybayes()
data.frame(
rho = extract(correlacion_robusta)$rho
) |>
ggplot(
aes(x = rho)
) +
ggdist::stat_halfeye(point_interval = 'mean_hdi', .width = c(0.8,0.95), fill = 'lightblue') +
ylab("Posterior Density") + xlab(expression(rho)) +
tidybayes::theme_tidybayes()
knitr::opts_chunk$set(echo = TRUE)
options(marginaleffects_posterior_interval = "hdi")
options(marginaleffects_posterior_center = mean)
library(brms)
library(tidybayes)
library(tidyverse)
library(bayesrules)
library(bayesplot)
library(marginaleffects)
#Load data
load('../data/exp1_data.RData')
#Compute influence score based on Zanete and factor column for good/bad news
dexp1 <- dexp1 %>%
mutate(
influencia = (p2-p1)/(pT-p1),
news = factor(ifelse(I==0, "bad", "good")),
subj = as.integer(subj)
)
memory_data <- dexp1 %>% filter(memory1 <= 1)
memory_data |> pivot_longer(cols = c(memory1, memory2), names_to = tiempo, values_to = memory)
memory_data |> pivot_longer(cols = c(memory1, memory2), names_to = 'tiempo', values_to = memory)
memory_data |> pivot_longer(cols = c(memory1, memory2), names_to = 'tiempo', values_to = 'memory')
memory_data |> pivot_longer(cols = c(memory1, memory2), names_to = 'tiempo', values_to = 'memory') |>
mutate(tiempo = ifelse(tiempo == 'memory1', 't1', 't2'))
memory_data <- memory_data |> pivot_longer(cols = c(memory1, memory2), names_to = 'tiempo', values_to = 'memory') |>
mutate(tiempo = ifelse(tiempo == 'memory1', 't1', 't2'))
memory_data <- memory_data |> pivot_longer(cols = c(memory1, memory2), names_to = 'tiempo', values_to = 'memory') |>
mutate(tiempo = ifelse(tiempo == 'memory1', 't1', 't2')) |>
filter(is.na(memory))
memory_data <- dexp1 %>% filter(memory1 <= 1)
memory_data <- memory_data |> pivot_longer(cols = c(memory1, memory2), names_to = 'tiempo', values_to = 'memory') |>
mutate(tiempo = ifelse(tiempo == 'memory1', 't1', 't2')) |>
filter(is.na(memory))
memory_data <- dexp1 %>% filter(memory1 <= 1)
memory_data <- memory_data |> pivot_longer(cols = c(memory1, memory2), names_to = 'tiempo', values_to = 'memory') |>
mutate(tiempo = ifelse(tiempo == 'memory1', 't1', 't2')) |>
filter(!is.na(memory))
ggplot(
memory_data,
aes(x = memory)
) +
geom_histogram()
memory_data <- dexp1 %>% filter(memory1 <= 1 & memory2 <= 1)
memory_data <- memory_data |> pivot_longer(cols = c(memory1, memory2), names_to = 'tiempo', values_to = 'memory') |>
mutate(tiempo = ifelse(tiempo == 'memory1', 't1', 't2')) |>
filter(!is.na(memory))
ggplot(
memory_data,
aes(x = memory)
) +
geom_histogram()
range(memory_data$memory1)
range(memory_data$memory)
memory_data <- dexp1 %>% filter(memory1 <= 1)
memory_data_long <- dexp1 %>% filter(memory1 <= 1 & memory2 <= 1) |> memory_data |> pivot_longer(cols = c(memory1, memory2), names_to = 'tiempo', values_to = 'memory') |>
mutate(tiempo = ifelse(tiempo == 'memory1', 't1', 't2')) |>
filter(!is.na(memory))
memory_data_long <- dexp1 |> filter(memory1 <= 1 & memory2 <= 1) |> memory_data |> pivot_longer(cols = c(memory1, memory2), names_to = 'tiempo', values_to = 'memory') |>
mutate(tiempo = ifelse(tiempo == 'memory1', 't1', 't2')) |>
filter(!is.na(memory))
memory_data_long <- dexp1 |> filter(memory1 <= 1 & memory2 <= 1) |> pivot_longer(cols = c(memory1, memory2), names_to = 'tiempo', values_to = 'memory') |>
mutate(tiempo = ifelse(tiempo == 'memory1', 't1', 't2')) |>
filter(!is.na(memory))
modelo_long <- brm(
bf(memory1 ~ tiempo * news * ep +
news * scoreOptimismo * ep +
news * scoreAnsiedad * ep +
news * pT +
(1 | subj),
zi ~ 1
),
data = memory_data,
family = zero_inflated_beta(),
seed = 1234, # for reproducibility
cores = 4, chains = 4,
iter = 10000,
prior = beta_weakpriors,
file = "model_fits/Exp1_memory_zerobeta"
)
modelo_long <- brm(
bf(memory1 ~ tiempo * news * ep +
news * scoreOptimismo * ep +
news * scoreAnsiedad * ep +
news * pT +
(1 | subj),
zi ~ 1
),
data = memory_data,
family = zero_inflated_beta(),
seed = 1234, # for reproducibility
cores = 4, chains = 4,
iter = 10000,
prior = beta_weakpriors,
file = "model_fits/Exp1_memory_zerobeta_long"
)
modelo_long <- brm(
bf(memory1 ~ tiempo * news * ep +
news * scoreOptimismo * ep +
news * scoreAnsiedad * ep +
news * pT +
(1 | subj),
zi ~ 1
),
data = memory_data_long,
family = zero_inflated_beta(),
seed = 1234, # for reproducibility
cores = 4, chains = 4,
iter = 10000,
prior = beta_weakpriors,
file = "model_fits/Exp1_memory_zerobeta_long"
)
modelo_long <- brm(
bf(memory ~ tiempo * news * ep +
news * scoreOptimismo * ep +
news * scoreAnsiedad * ep +
news * pT +
(1 | subj),
zi ~ 1
),
data = memory_data_long,
family = zero_inflated_beta(),
seed = 1234, # for reproducibility
cores = 4, chains = 4,
iter = 10000,
prior = beta_weakpriors,
file = "model_fits/Exp1_memory_zerobeta_long"
)
beta_weakpriors <- c(
set_prior('normal(0,2)', class = 'b'),
set_prior('normal(-3,1)', class = 'Intercept', dpar = 'zi'),
set_prior('normal(0,2)', class = 'Intercept'),
set_prior('gamma(1,0.01)', class = 'phi'),
set_prior('normal(0,1)', class = 'sd')
)
modelo_long <- brm(
bf(memory ~ tiempo * news * ep +
news * scoreOptimismo * ep +
news * scoreAnsiedad * ep +
news * pT +
(1 | subj),
zi ~ 1
),
data = memory_data_long,
family = zero_inflated_beta(),
seed = 1234, # for reproducibility
cores = 4, chains = 4,
iter = 10000,
prior = beta_weakpriors,
file = "model_fits/Exp1_memory_zerobeta_long"
)
# Trace plots of parallel chains
mcmc_trace(modelo_lineal, size = 0.1, regex_pars = 'fixed')
# Trace plots of parallel chains
mcmc_trace(modelo_long, size = 0.1, regex_pars = 'fixed')
# Trace plots of parallel chains
mcmc_trace(modelo_long, size = 0.1, regex_pars = 'b_')
# Density plots of parallel chains
mcmc_dens_overlay(modelo_lineal, regex_pars = 'b_')
# Density plots of parallel chains
mcmc_dens_overlay(modelo_long, regex_pars = 'b_')
# R hat values
rhat(modelo_long)
# ESS Values
neff_ratio(modelo_long)
avg_predictions(modelo_long, variables = 'tiempo')
zero_beta_fit <- brm(
bf(memory1 ~ news * scoreOptimismo * ep +
news * scoreAnsiedad * ep +
news * pT +
(1 | subj),
zi ~ 1
),
data = memory_data,
family = zero_inflated_beta(),
seed = 1234, # for reproducibility
cores = 4, chains = 4,
iter = 10000,
prior = beta_weakpriors,
file = "model_fits/Exp1_memory_zerobeta"
)
gc()
zero_beta_fit <- brm(
bf(memory1 ~ news * scoreOptimismo * ep +
news * scoreAnsiedad * ep +
news * pT +
(1 | subj),
zi ~ 1
),
data = memory_data,
family = zero_inflated_beta(),
seed = 1234, # for reproducibility
cores = 4, chains = 4,
iter = 10000,
prior = beta_weakpriors,
file = "model_fits/Exp1_memory_zerobeta"
)
avg_predictions(
zero_beta_fit, by = 'news'
)
posterior_news_draws <- avg_predictions(
zero_beta_fit, by = 'news'
) |> posterior_draws()
posterior_news_draws |> ggplot(
aes(x = draw, fill = news)
) +
stat_slab(alpha = 0.75) +
stat_pointinterval(position = position_dodge(width = .3, preserve = "single"), point_interval = 'mean_hdi') +
scale_y_continuous('Posterior Density', breaks = NULL) +
scale_fill_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes() + xlab("Memory Response")
posterior_news_draws |>
pivot_wider(id_cols = drawid, names_from = news, values_from = draw) |>
transmute(
diferencia = good - bad
) |> ggplot(
aes(x = diferencia)
) +
stat_halfeye(point_interval = 'mean_hdi')
posterior_news_draws |>
pivot_wider(id_cols = drawid, names_from = news, values_from = draw) |>
transmute(
diferencia = good - bad
) |>
pull(diferencia) |>
ggdist::mean_hdi()
avg_slopes(
zero_beta_fit,
variables = 'scoreOptimismo'
)
avg_slopes(
zero_beta_fit,
variables = 'scoreAnsiedad'
)
avg_slopes(zero_beta_fit, variables = c("scoreOptimismo"), by = c('news'))
avg_slopes(zero_beta_fit, variables = c("scoreAnsiedad"), by = c('news'))
avg_slopes(
zero_beta_fit,
variables = 'ep'
)
avg_slopes(zero_beta_fit, variables = c("ep"), by = c('news'))
avg_slopes(zero_beta_fit, variables = c("ep"), by = c('news'))
avg_slopes(zero_beta_fit, variables = 'pT')
avg_slopes(zero_beta_fit, variables = c("pT"), by = c('news'))
avg_slopes(zero_beta_fit, variables = c("pT"), by = c('news')) |> posterior_draws() |>
pivot_wider(id_cols = drawid, names_from = news, values_from = draw) |>
transmute(
diferencia = good - bad
) |>
pull(diferencia) |>
ggdist::mean_hdi()
avg_predictions(modelo_long, variables = c('tiempo', 'news'))
avg_predictions(modelo_long, variables = 'tiempo', by = 'news')
avg_slopes(modelo_long, variables = 'tiempo')
avg_slopes(modelo_long, variables = 'tiempo', by = 'news')
avg_predictions(modelo_long, variables = 'tiempo')
avg_predictions(modelo_long, variables = 'tiempo') |> posterior_draws() |>
pivot_wider(id_cols = drawid, names_from = news, values_from = draw) |>
transmute(
diferencia = t1 - t2
) |>
pull(diferencia) |>
ggdist::mean_hdi()
avg_predictions(modelo_long, variables = 'tiempo') |> posterior_draws() |>
pivot_wider(id_cols = drawid, names_from = tiempo, values_from = draw) |>
transmute(
diferencia = t1 - t2
) |>
pull(diferencia) |>
ggdist::mean_hdi()
avg_predictions(modelo_long, variables = 'tiempo')
avg_slopes(modelo_long, variables = 'tiempo')
avg_slopes(modelo_long, variables = 'tiempo', by = 'news')
gc()
library(brms)
library(tidyverse)
library(bayesrules)
library(bayesplot)
library(ggdist)
#Load data
load('../data/exp1_data.RData')
#Compute influence score based on Zanete and factor column for good/bad news
dexp1 <- dexp1 %>%
mutate(
news = factor(ifelse(I==0, "bad", "good")),
subj = as.integer(subj)
)
get_prior(update ~
news * scoreOptimismo * ep +
news * scoreAnsiedad * ep +
news * pT +
(1 | subj),
data = dexp1,)
priors <- c(
set_prior("normal(0,5)", class = "b")
)
prior_model_1 <- brm(update ~
news * scoreOptimismo * ep +
news * scoreAnsiedad * ep +
news * pT +
(1 | subj),
data = dexp1,
seed = 1234, # for reproducibility
cores = 4, chains = 4,
iter = 10000,
sample_prior = 'only',
prior = priors,
file = "model_fits/Exp1PriorPredictive"
)
bayesplot::ppc_hist(
dexp1$update,
brms::posterior_predict(prior_model_1, ndraws = 11)
)
update_model <- brm(update ~
news * scoreOptimismo * ep +
news * scoreAnsiedad * ep +
news * pT +
(1 | subj),
data = dexp1,
seed = 1234, # for reproducibility
cores = 4, chains = 4,
prior = priors,
iter = 10000,
file = "model_fits/FitExp1"
)
update_model_parameters <- variables(update_model)
update_model_params_other <- update_model_parameters[
!stringr::str_detect(update_model_parameters, 'b_|subj')
]
mcmc_trace(update_model, pars = vars(contains('b_')))
mcmc_trace(update_model, pars = vars(contains('subj')))
mcmc_trace(update_model, pars = update_model_params_other)
mcmc_dens(update_model, pars = vars(contains('b_')))
mcmc_dens(update_model, pars = vars(contains('subj')))
mcmc_dens(update_model, pars = update_model_params_other)
mcmc_dens_overlay(update_model, pars = vars(contains('b_')))
mcmc_dens_overlay(update_model, pars = vars(contains('subj')))
mcmc_dens_overlay(update_model, pars = update_model_params_other)
mcmc_acf_bar(update_model, pars = vars(contains('b_')))
neff_ratio(update_model)
rhat(update_model)
avg_predictions(update_model, by = 'news')
library(marginaleffects)
avg_predictions(update_model, by = 'news')
avg_predictions(update_model, by = 'news') |>
ggplot(
aes(x = news, y = estimate, ymin = conf.low, ymax = conf.high)
) +
geom_pointrange()
avg_predictions(update_model, by = 'news') |>
ggplot(
aes(x = news, y = estimate, ymin = conf.low, ymax = conf.high)
) +
geom_pointrange() +
ylab("Update response") + xlab("News Valence") +
scale_x_discrete(labels = c("Bad", "Good")) +
theme_tidybayes()
avg_predictions(update_model, by = 'news') |>
ggplot(
aes(x = news, y = estimate, ymin = conf.low, ymax = conf.high)
) +
geom_pointrange() +
ylab("Update response") + xlab("News Valence") +
scale_x_discrete(labels = c("Bad News", "Good News")) +
theme_tidybayes()
knitr::opts_chunk$set(echo = TRUE)
library(rstan)
library(ggExtra)
library(bayesplot)
#Load data
load('../data/exp1_data.RData')
#Compute influence score based on Zanete and factor column for good/bad news
dexp1 <- dexp1 %>%
mutate(
news = factor(ifelse(I==0, "bad", "good")),
subj = as.integer(subj)
)
p <- dexp1 |> group_by(subj) |> summarise(anx = unique(scoreAnsiedad), opt = unique(scoreOptimismo)) |>
ggplot(
aes(x = anx, y = opt)
) +
geom_point() +
geom_density2d() +
tidybayes::theme_tidybayes() + xlab("Anxiety") + ylab("Optimism")
ggExtra::ggMarginal(p, type = 'histogram')
p <- dexp1 |> group_by(subj) |> summarise(anx = unique(scoreAnsiedad), opt = unique(scoreOptimismo)) |>
ggplot(
aes(x = anx, y = opt)
) +
geom_point() +
tidybayes::theme_tidybayes() + xlab("Anxiety") + ylab("Optimism")
ggExtra::ggMarginal(p, type = 'histogram')
avg_slopes(update_model, variables = c("scoreOptimismo"), by = c('news'))
avg_slopes(update_model, variables = c("scoreOptimismo"), by = c('news')) |>
posterior_draws() |>
ggplot(
aes(x = draw, fill = news)
) +
stat_halfeye()
avg_slopes(update_model, variables = c("scoreOptimismo"), by = c('news')) |>
posterior_draws() |>
ggplot(
aes(x = draw, fill = news)
) +
stat_halfeye(alpha = 0.75) +
scale_y_continuous('Posterior Density', breaks = NULL) +
scale_fill_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes() + xlab("Update Response")
avg_slopes(update_model, variables = c("scoreOptimismo"), by = c('news')) |>
posterior_draws() |>
pivot_wider(id_cols = drawid, names_from = news, values_from = draw) |>
transmute(
diferencia = good - bad
) |>
pull(diferencia) |>
ggdist::mean_hdi()
avg_slopes(update_model, variables = c("scoreOptimismo"), by = c('news')) |>
ggplot(
aes(x = news, y = estimate, ymin = conf.low, ymax = conf.high)
) +
geom_pointrange() +
scale_y_continuous('Update Response') +
scale_x_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes()
avg_slopes(update_model, variables = c("scoreOptimismo"), by = c('news')) |>
ggplot(
aes(x = news, y = estimate, ymin = conf.low, ymax = conf.high)
) +
geom_pointrange() +
scale_y_continuous('Average Marginal Effect (Slope)') +
scale_x_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes()
plot_predictions(update_model, condition = c("scoreOptimismo", "news"))
plot_predictions(update_model, condition = c("scoreOptimismo", "news")) +
scale_y_continuous('Update Response') +
scale_fill_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes()
plot_predictions(update_model, condition = c("scoreOptimismo", "news")) +
scale_y_continuous('Update Response') +
scale_color_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes()
plot_predictions(update_model, condition = c("scoreOptimismo", "news")) +
scale_y_continuous('Update Response') +
theme_tidybayes()
plot_predictions(update_model, condition = c("scoreOptimismo", "news")) +
scale_y_continuous('Update Response') +
scale_color_discrete('News Valence', labels = c('Bad News','Good News')) +
scale_fill_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes()
plot_predictions(update_model, condition = c("scoreOptimismo", "news")) +
scale_y_continuous('Update Response') + xlab("Optimism")
plot_predictions(update_model, condition = c("scoreOptimismo", "news")) +
scale_y_continuous('Update Response') + xlab("Optimism") +
scale_color_discrete('News Valence', labels = c('Bad News','Good News')) +
scale_fill_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes()
avg_slopes(update_model, variables = c("scoreAnsiedad"), by = c('news')) |>
posterior_draws() |>
ggplot(
aes(x = draw, fill = news)
) +
stat_halfeye(alpha = 0.75) +
scale_y_continuous('Posterior Density', breaks = NULL) +
scale_fill_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes() + xlab("Update Response")
avg_slopes(update_model, variables = c("scoreAnsiedad"), by = c('news')) |>
ggplot(
aes(x = news, y = estimate, ymin = conf.low, ymax = conf.high)
) +
geom_pointrange() +
scale_y_continuous('Average Marginal Effect (Slope)') +
scale_x_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes()
avg_slopes(update_model, variables = c("scoreAnsiedad"), by = c('news')) |>
ggplot(
aes(x = news, y = estimate, ymin = conf.low, ymax = conf.high)
) +
geom_pointrange() +
scale_y_continuous('Average Marginal Effect (Slope)') +
scale_x_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes()
avg_slopes(update_model, variables = c("scoreAnsiedad"), by = c('news')) |>
posterior_draws() |>
ggplot(
aes(x = draw, fill = news)
) +
stat_halfeye(alpha = 0.75) +
scale_y_continuous('Posterior Density', breaks = NULL) +
scale_fill_discrete('News Valence', labels = c('Bad News','Good News')) +
theme_tidybayes() + xlab("Update Response")
range(dexp1$update)
range(dexp1$ep)
broom.mixed::tidy(update_model)
version
citation()
RStudio.Version()
?mcmc_trace
?neff_ratio
?tidybayes
?mean_hdi()
